{"version":3,"file":"PromiseCanceller.js","sourceRoot":"","sources":["../../src/execution/PromiseCanceller.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,oBAAoB,EAAE,4CAA2C;AAE1E;;;;;GAKG;AACH,MAAM,OAAO,gBAAgB;IAM3B,YAAY,WAAwB;QAClC,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC;QAC/B,IAAI,CAAC,OAAO,GAAG,IAAI,GAAG,EAAc,CAAC;QACrC,IAAI,CAAC,KAAK,GAAG,GAAG,EAAE;YAChB,KAAK,MAAM,KAAK,IAAI,IAAI,CAAC,OAAO,EAAE,CAAC;gBACjC,KAAK,EAAE,CAAC;YACV,CAAC;QACH,CAAC,CAAC;QAEF,WAAW,CAAC,gBAAgB,CAAC,OAAO,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;IACpD,CAAC;IAED,UAAU;QACR,IAAI,CAAC,WAAW,CAAC,mBAAmB,CAAC,OAAO,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;IAC5D,CAAC;IAED,gBAAgB,CAAI,eAA2B;QAC7C,IAAI,IAAI,CAAC,WAAW,CAAC,OAAO,EAAE,CAAC;YAC7B,2EAA2E;YAC3E,OAAO,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC;QACjD,CAAC;QAED,MAAM,EAAE,OAAO,EAAE,OAAO,EAAE,MAAM,EAAE,GAAG,oBAAoB,EAAK,CAAC;QAC/D,MAAM,KAAK,GAAG,GAAG,EAAE,CAAC,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC;QACpD,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;QACxB,eAAe,CAAC,IAAI,CAClB,CAAC,QAAQ,EAAE,EAAE;YACX,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;YAC3B,OAAO,CAAC,QAAQ,CAAC,CAAC;QACpB,CAAC,EACD,CAAC,KAAc,EAAE,EAAE;YACjB,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;YAC3B,MAAM,CAAC,KAAK,CAAC,CAAC;QAChB,CAAC,CACF,CAAC;QAEF,OAAO,OAAO,CAAC;IACjB,CAAC;CACF","sourcesContent":["import { promiseWithResolvers } from '../jsutils/promiseWithResolvers.js';\n\n/**\n * A PromiseCanceller object can be used to cancel multiple promises\n * using a single AbortSignal.\n *\n * @internal\n */\nexport class PromiseCanceller {\n  abortSignal: AbortSignal;\n  abort: () => void;\n\n  private _aborts: Set<() => void>;\n\n  constructor(abortSignal: AbortSignal) {\n    this.abortSignal = abortSignal;\n    this._aborts = new Set<() => void>();\n    this.abort = () => {\n      for (const abort of this._aborts) {\n        abort();\n      }\n    };\n\n    abortSignal.addEventListener('abort', this.abort);\n  }\n\n  disconnect(): void {\n    this.abortSignal.removeEventListener('abort', this.abort);\n  }\n\n  withCancellation<T>(originalPromise: Promise<T>): Promise<T> {\n    if (this.abortSignal.aborted) {\n      // eslint-disable-next-line @typescript-eslint/prefer-promise-reject-errors\n      return Promise.reject(this.abortSignal.reason);\n    }\n\n    const { promise, resolve, reject } = promiseWithResolvers<T>();\n    const abort = () => reject(this.abortSignal.reason);\n    this._aborts.add(abort);\n    originalPromise.then(\n      (resolved) => {\n        this._aborts.delete(abort);\n        resolve(resolved);\n      },\n      (error: unknown) => {\n        this._aborts.delete(abort);\n        reject(error);\n      },\n    );\n\n    return promise;\n  }\n}\n"]}